/**
 * Build for Fabric3 Gradle plugins.
 * <p/>
 * By default, deploy project binaries, Javadoc and sources will be installed in the local Maven repo. To only build binaries and skip generating Javadoc and
 * source archives, pass the <code>skipSources<code> parameter to Gradle: gradlew -PskipSources
 * <p/>
 * To deploy to the CodeHaus Nexus snapshot repository, execute the 'uploadArchives' task. To deploy to the CodeHaus Nexus release staging repository,
 * change the version and execute the 'uploadArchives' task.
 * <p/>
 * Note the 'uploadArchives' tasks requires a gradle.properties file to be present containing private key information and authentication parameters
 * (codehausUsername and codehausPassword).

 */
project.description = 'Fabric3 Gradle plugins'

defaultTasks 'clean', 'assemble', 'install'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

def deployProjects() {
    // define projects that are distributions, i.e. they contain source files; project parent directories will be ignored
    return subprojects.findAll { new File(it.projectDir, "src").exists() }
}

configure(deployProjects()) {
    group = pluginGroup
    def releaseBuild = !version.endsWith('SNAPSHOT');

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    dependencies {
        compile gradleApi()

        compile group: 'org.eclipse.aether', name: 'aether-api', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-util', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-impl', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-connector-basic', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-file', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-http', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-wagon', version: aetherVersion
        compile group: 'org.apache.maven', name: 'maven-aether-provider', version: '3.1.1'

        testCompile 'junit:junit:4.5'
    }

    if (project.hasProperty("skipSources")) {
        return
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task docJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives docJar
    }

    install.repositories.mavenInstaller.pom.whenConfigured { pom ->
        pom.project { project ->
            scm {
                url 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                connection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                developerConnection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
            }

            licenses {
                license {
                    name 'GNU + Classpath Exception'
                    url 'http://www.fabric3.org/license.html'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'fabric3'
                    name 'Fabric3 Project'
                }
            }
        }
    }

    uploadArchives {
        repositories {
            if (!project.hasProperty('codehausUsername')) {
                println("Skipping upload artifacts as codehausUsername is not defined: "+ codehausUsername)
                return;
            }

            if (releaseBuild) {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://nexus.codehaus.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: codehausUsername, password: codehausPassword)
                    }

                }
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://nexus.codehaus.org/content/repositories/snapshots/") {
                        authentication(userName: codehausUsername, password: codehausPassword)
                    }
                }
            }
        }
        signing {
            if (!hasProperty('signing.keyId')) {
                return;
            }
            sign configurations.archives
        }

    }

}

def plugins() {
    return subprojects.findAll { project -> !project.name.startsWith('fabric3-plugin-core') }
}

configure(plugins()) {
    dependencies {
        compile project(':fabric3-plugin-core')
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}