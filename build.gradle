/**
 * Build for Fabric3 Gradle plugins.
 *
 * By default, deploy project binaries, Javadoc and sources will be installed in the local Maven repo. To only build binaries and skip generating Javadoc and
 * source archives, pass the <code>skipSources<code> parameter to Gradle: gradlew -PskipSources
 *
 * Prior to release, update the {@link org.fabric3.gradle.plugin.core.Constants#FABRIC3_VERSION}.
 *
 * To deploy to the Nexus release staging repository, change the version and execute:
 * <code>./gradlew -Pbuild=deploy -Dcom.sun.net.ssl.rsaPreMasterSecretFix=true</code>
 * after a full build has been run. Note the 'rsaPreMasterSecretFix' parameter is required as a workaround for this JDK bug:
 * https://bugs.openjdk.java.net/browse/JDK-8030806
 *
 * Note the 'uploadArchives' tasks requires a gradle.properties file to be present containing private key information and authentication parameters
 * (sonatypeUsername and sonatypePassword).
 */
project.description = 'Fabric3 Gradle plugins'


if (hasProperty('build')) {
    ext.build = project['build']
} else {
    ext.build = 'default';
}
if (ext.build == 'deploy') {
    defaultTasks 'uploadArchives'
} else {
    defaultTasks 'clean', 'assemble', 'install'
}

if (!hasProperty('sonatypeUsername')) {
    project.ext.sonatypeUsername = "undefined"
}

if (!hasProperty('sonatypePassword')) {
    project.ext.sonatypePassword = "undefined"
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }

}

def deployProjects() {
    // define projects that are distributions, i.e. they contain source files; project parent directories will be ignored
    return subprojects.findAll { new File(it.projectDir, "src").exists() }
}

configure(deployProjects()) {
    group = pluginGroup
    def releaseBuild = !version.endsWith('SNAPSHOT');

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'signing'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile gradleApi()

        compile group: 'org.eclipse.aether', name: 'aether-api', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-util', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-impl', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-connector-basic', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-file', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-http', version: aetherVersion
        compile group: 'org.eclipse.aether', name: 'aether-transport-wagon', version: aetherVersion
        compile group: 'org.apache.maven', name: 'maven-aether-provider', version: '3.1.1'

        testCompile 'junit:junit:4.5'
    }

    if (project.hasProperty("skipSources")) {
        return
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task docJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives docJar
    }

    install.repositories.mavenInstaller.pom.whenConfigured { pom ->
        pom.project { project ->
            scm {
                url 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                connection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                developerConnection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
            }

            licenses {
                license {
                    name 'Apache 2'
                    url 'http://www.fabric3.org/license.html'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'fabric3'
                    name 'Fabric3 Project'
                }
            }
        }
    }

    uploadArchives {
        repositories {
            if (releaseBuild) {

                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }

                    pom.project {
                        url 'http://fabric3.org'
                        name 'Fabric3 Plugins'
                        description 'Fabric3 Plugins'
                        scm {
                            url 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                            connection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                            developerConnection 'scm:git@github.com:Fabric3/fabric3-gradle-plugins.git'
                        }

                        licenses {
                            license {
                                name 'Apache 2'
                                url 'http://www.fabric3.org/license.html'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'fabric3'
                                name 'Fabric3 Project'
                            }
                        }
                    }

                }
            } else {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                        authentication(userName: sonatypeUsername, password: sonatypePassword)
                    }
                }
            }
        }

        signing {
            required { releaseBuild && (build == 'full' || build == 'deploy') }
            sign configurations.archives
        }
    }

}

def plugins() {
    return subprojects.findAll { project -> !project.name.startsWith('fabric3-plugin-core') }
}

configure(plugins()) {
    dependencies {
        compile project(':fabric3-plugin-core')
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}